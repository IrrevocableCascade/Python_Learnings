import itertools
from math import sqrt

__author__ = 'Irrevocable Cascade'

"""The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""

flatten_iter = itertools.chain.from_iterable


def find_factors(n):
	return set(flatten_iter((i, n // i) for i in range(1, int(sqrt(n)) + 1) if n % i == 0))


def triangle_numbers(start):
	factors = set()
	number = start
	total = 0

	while True:
		total += number
		factors = find_factors(total)

		if len(factors) >= 500:
			break
		factors.clear()

		number += 1

	return factors


print(max(triangle_numbers(1)))
